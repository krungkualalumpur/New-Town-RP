--!strict
-- this script was generated by nightcycle/midas-clt, do not manually edit

-- Packages
local Midas = require(game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Midas"))

-- Types
export type TrackerAccessNode<T> = (player: Player, solver: () -> T) -> nil
export type CharacterStateType = "FallingDown" | "Running" | "RunningNoPhysics" | "Climbing" | "StrafingNoPhysics" | "Ragdoll" | "GettingUp" | "Jumping" | "Landed" | "Flying" | "Freefall" | "Seated" | "PlatformStanding" | "Dead" | "Swimming" | "Physics" | "None"
export type SpendingPurchaseProductNameType = "dev_product_name_1" | "dev_product_name_2"
export type SpendingPurchaseGamepassNameType = "gamepass_name_1" | "gamepass_name_2"
export type DemographicsRobloxLanguageType = "en-us" | "pt-br" | "en-uk"
export type DemographicsSystemLanguageType = "en-us" | "pt-br" | "en-uk"
export type DemographicsPlatformScreenRatioType = "16:10" | "16:9" | "5:4" | "5:3" | "3:2" | "4:3" | "9:16" | "uncommon"

-- Class
function constructTracker<T>(path: string, decimalCount: number?): TrackerAccessNode<T>
	return function(player: Player, solver: () -> T)
			local keys: {[number]: string} = path:split("/")
			local propertyName = keys[#keys]
			table.remove(keys, #keys)
			local basePath = table.concat(keys, "/")
			local tracker = Midas:GetTracker(player, basePath)
			tracker:SetState(propertyName, solver)
			if decimalCount then
				tracker:SetRoundingPrecision(decimalCount)
			end
			return nil
	end
end

return {
	["Duration"] = constructTracker("Duration", 0) :: TrackerAccessNode<number>,
	["IsStudio"] = constructTracker("IsStudio", nil) :: TrackerAccessNode<boolean>,
	["Id"] = {
		["Place"] = constructTracker("Id/Place", nil) :: TrackerAccessNode<string>,
		["Session"] = constructTracker("Id/Session", nil) :: TrackerAccessNode<string>,
		["User"] = constructTracker("Id/User", nil) :: TrackerAccessNode<string>,
	},
	["Index"] = {
		["Event"] = constructTracker("Index/Event", 0) :: TrackerAccessNode<number>,
		["Total"] = constructTracker("Index/Total", 0) :: TrackerAccessNode<number>,
	},
	["Version"] = {
		["Build"] = constructTracker("Version/Build", 0) :: TrackerAccessNode<number>,
		["Major"] = constructTracker("Version/Major", 0) :: TrackerAccessNode<number>,
		["Minor"] = constructTracker("Version/Minor", 0) :: TrackerAccessNode<number>,
		["Patch"] = constructTracker("Version/Patch", 0) :: TrackerAccessNode<number>,
	},
	["Chat"] = {
		["LastMessage"] = constructTracker("Chat/LastMessage", nil) :: TrackerAccessNode<string>,
		["Count"] = constructTracker("Chat/Count", 0) :: TrackerAccessNode<number>,
	},
	["Character"] = {
		["IsDead"] = constructTracker("Character/IsDead", nil) :: TrackerAccessNode<boolean>,
		["Height"] = constructTracker("Character/Height", 2) :: TrackerAccessNode<number>,
		["Mass"] = constructTracker("Character/Mass", 2) :: TrackerAccessNode<number>,
		["State"] = constructTracker("Character/State", nil) :: TrackerAccessNode<CharacterStateType>,
		["WalkSpeed"] = constructTracker("Character/WalkSpeed", 2) :: TrackerAccessNode<number>,
		["Altitude"] = constructTracker("Character/Altitude", 2) :: TrackerAccessNode<number>,
		["JumpPower"] = constructTracker("Character/JumpPower", 2) :: TrackerAccessNode<number>,
		["Health"] = constructTracker("Character/Health", 2) :: TrackerAccessNode<number>,
		["MaxHealth"] = constructTracker("Character/MaxHealth", 2) :: TrackerAccessNode<number>,
		["Deaths"] = constructTracker("Character/Deaths", 0) :: TrackerAccessNode<number>,
		["Position"] = {
			["X"] = constructTracker("Character/Position/X", 2) :: TrackerAccessNode<number>,
			["Y"] = constructTracker("Character/Position/Y", 2) :: TrackerAccessNode<number>,
		},
	},
	["Performance"] = {
		["Client"] = {
			["Ping"] = constructTracker("Performance/Client/Ping", 0) :: TrackerAccessNode<number>,
			["FPS"] = constructTracker("Performance/Client/FPS", 0) :: TrackerAccessNode<number>,
		},
		["Server"] = {
			["EventsPerMinute"] = constructTracker("Performance/Server/EventsPerMinute", 0) :: TrackerAccessNode<number>,
			["HeartRate"] = constructTracker("Performance/Server/HeartRate", 0) :: TrackerAccessNode<number>,
			["Instances"] = constructTracker("Performance/Server/Instances", 0) :: TrackerAccessNode<number>,
			["Memory"] = {
				["Signals"] = constructTracker("Performance/Server/Memory/Signals", 0) :: TrackerAccessNode<number>,
				["LuaHeap"] = constructTracker("Performance/Server/Memory/LuaHeap", 0) :: TrackerAccessNode<number>,
				["Script"] = constructTracker("Performance/Server/Memory/Script", 0) :: TrackerAccessNode<number>,
				["PhysicsParts"] = constructTracker("Performance/Server/Memory/PhysicsParts", 0) :: TrackerAccessNode<number>,
				["CSG"] = constructTracker("Performance/Server/Memory/CSG", 0) :: TrackerAccessNode<number>,
				["Particle"] = constructTracker("Performance/Server/Memory/Particle", 0) :: TrackerAccessNode<number>,
				["Part"] = constructTracker("Performance/Server/Memory/Part", 0) :: TrackerAccessNode<number>,
				["MeshPart"] = constructTracker("Performance/Server/Memory/MeshPart", 0) :: TrackerAccessNode<number>,
				["TerrainGraphics"] = constructTracker("Performance/Server/Memory/TerrainGraphics", 0) :: TrackerAccessNode<number>,
				["Textures"] = constructTracker("Performance/Server/Memory/Textures", 0) :: TrackerAccessNode<number>,
				["TerrainVoxels"] = constructTracker("Performance/Server/Memory/TerrainVoxels", 0) :: TrackerAccessNode<number>,
				["Animations"] = constructTracker("Performance/Server/Memory/Animations", 0) :: TrackerAccessNode<number>,
			},
		},
	},
	["Spending"] = {
		["Purchase"] = {
			["Product"] = {
				["Name"] = constructTracker("Spending/Purchase/Product/Name", nil) :: TrackerAccessNode<SpendingPurchaseProductNameType>,
				["Price"] = constructTracker("Spending/Purchase/Product/Price", 0) :: TrackerAccessNode<number>,
			},
			["Gamepass"] = {
				["Name"] = constructTracker("Spending/Purchase/Gamepass/Name", nil) :: TrackerAccessNode<SpendingPurchaseGamepassNameType>,
				["Price"] = constructTracker("Spending/Purchase/Gamepass/Price", 0) :: TrackerAccessNode<number>,
			},
		},
	},
	["Demographics"] = {
		["AccountAge"] = constructTracker("Demographics/AccountAge", 0) :: TrackerAccessNode<number>,
		["RobloxLanguage"] = constructTracker("Demographics/RobloxLanguage", nil) :: TrackerAccessNode<DemographicsRobloxLanguageType>,
		["SystemLanguage"] = constructTracker("Demographics/SystemLanguage", nil) :: TrackerAccessNode<DemographicsSystemLanguageType>,
		["UserSettings"] = {
			["GamepadCameraSensitivity"] = constructTracker("Demographics/UserSettings/GamepadCameraSensitivity", 2) :: TrackerAccessNode<number>,
			["MouseSensitivity"] = constructTracker("Demographics/UserSettings/MouseSensitivity", 2) :: TrackerAccessNode<number>,
			["SavedQualityLevel"] = constructTracker("Demographics/UserSettings/SavedQualityLevel", 0) :: TrackerAccessNode<number>,
		},
		["Platform"] = {
			["Accelerometer"] = constructTracker("Demographics/Platform/Accelerometer", nil) :: TrackerAccessNode<boolean>,
			["Gamepad"] = constructTracker("Demographics/Platform/Gamepad", nil) :: TrackerAccessNode<boolean>,
			["Gyroscope"] = constructTracker("Demographics/Platform/Gyroscope", nil) :: TrackerAccessNode<boolean>,
			["Keyboard"] = constructTracker("Demographics/Platform/Keyboard", nil) :: TrackerAccessNode<boolean>,
			["Mouse"] = constructTracker("Demographics/Platform/Mouse", nil) :: TrackerAccessNode<boolean>,
			["Touch"] = constructTracker("Demographics/Platform/Touch", nil) :: TrackerAccessNode<boolean>,
			["VR"] = constructTracker("Demographics/Platform/VR", nil) :: TrackerAccessNode<boolean>,
			["ScreenSize"] = constructTracker("Demographics/Platform/ScreenSize", 0) :: TrackerAccessNode<number>,
			["ScreenRatio"] = constructTracker("Demographics/Platform/ScreenRatio", nil) :: TrackerAccessNode<DemographicsPlatformScreenRatioType>,
		},
	},
}
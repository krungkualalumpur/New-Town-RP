--!strict
-- this script was generated by nightcycle/midas-clt, do not manually edit

-- Packages
local Midas = require(game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Midas"))

-- Types
export type TriggerNode = (player: Player) -> nil
export type CharacterStateType = "FallingDown" | "Running" | "RunningNoPhysics" | "Climbing" | "StrafingNoPhysics" | "Ragdoll" | "GettingUp" | "Jumping" | "Landed" | "Flying" | "Freefall" | "Seated" | "PlatformStanding" | "Dead" | "Swimming" | "Physics" | "None"
export type SpendingPurchaseProductNameType = "dev_product_name_1" | "dev_product_name_2"
export type SpendingPurchaseGamepassNameType = "gamepass_name_1" | "gamepass_name_2"
export type DemographicsRobloxLanguageType = "en-us" | "pt-br" | "en-uk"
export type DemographicsSystemLanguageType = "en-us" | "pt-br" | "en-uk"
export type DemographicsPlatformScreenRatioType = "16:10" | "16:9" | "5:4" | "5:3" | "3:2" | "4:3" | "9:16" | "uncommon"

-- Class
function constructTrigger<T>(path: string, seriesDuration: number?): TriggerNode
	return function(player: Player)
			local keys: {[number]: string} = path:split("/")
			local propertyName = keys[#keys]
			table.remove(keys, #keys)
			local basePath = table.concat(keys, "/")
			local tracker = Midas:GetTracker(player, basePath)
			tracker:Fire(propertyName, nil, seriesDuration)
	end
end

return {
	["Duration"] = constructTrigger("Duration") :: TriggerNode,
	["IsStudio"] = constructTrigger("IsStudio") :: TriggerNode,
	["Id"] = {
		["Place"] = constructTrigger("Id/Place") :: TriggerNode,
		["Session"] = constructTrigger("Id/Session") :: TriggerNode,
		["User"] = constructTrigger("Id/User") :: TriggerNode,
	},
	["Index"] = {
		["Event"] = constructTrigger("Index/Event") :: TriggerNode,
		["Total"] = constructTrigger("Index/Total") :: TriggerNode,
	},
	["Version"] = {
		["Build"] = constructTrigger("Version/Build") :: TriggerNode,
		["Major"] = constructTrigger("Version/Major") :: TriggerNode,
		["Minor"] = constructTrigger("Version/Minor") :: TriggerNode,
		["Patch"] = constructTrigger("Version/Patch") :: TriggerNode,
	},
	["Chat"] = {
		["LastMessage"] = constructTrigger("Chat/LastMessage") :: TriggerNode,
		["Count"] = constructTrigger("Chat/Count") :: TriggerNode,
	},
	["Character"] = {
		["IsDead"] = constructTrigger("Character/IsDead") :: TriggerNode,
		["Height"] = constructTrigger("Character/Height") :: TriggerNode,
		["Mass"] = constructTrigger("Character/Mass") :: TriggerNode,
		["State"] = constructTrigger("Character/State") :: TriggerNode,
		["WalkSpeed"] = constructTrigger("Character/WalkSpeed") :: TriggerNode,
		["Altitude"] = constructTrigger("Character/Altitude") :: TriggerNode,
		["JumpPower"] = constructTrigger("Character/JumpPower") :: TriggerNode,
		["Health"] = constructTrigger("Character/Health") :: TriggerNode,
		["MaxHealth"] = constructTrigger("Character/MaxHealth") :: TriggerNode,
		["Deaths"] = constructTrigger("Character/Deaths") :: TriggerNode,
		["Position"] = {
			["X"] = constructTrigger("Character/Position/X") :: TriggerNode,
			["Y"] = constructTrigger("Character/Position/Y") :: TriggerNode,
		},
	},
	["Performance"] = {
		["Client"] = {
			["Ping"] = constructTrigger("Performance/Client/Ping") :: TriggerNode,
			["FPS"] = constructTrigger("Performance/Client/FPS") :: TriggerNode,
		},
		["Server"] = {
			["EventsPerMinute"] = constructTrigger("Performance/Server/EventsPerMinute") :: TriggerNode,
			["HeartRate"] = constructTrigger("Performance/Server/HeartRate") :: TriggerNode,
			["Instances"] = constructTrigger("Performance/Server/Instances") :: TriggerNode,
			["Memory"] = {
				["Signals"] = constructTrigger("Performance/Server/Memory/Signals") :: TriggerNode,
				["LuaHeap"] = constructTrigger("Performance/Server/Memory/LuaHeap") :: TriggerNode,
				["Script"] = constructTrigger("Performance/Server/Memory/Script") :: TriggerNode,
				["PhysicsParts"] = constructTrigger("Performance/Server/Memory/PhysicsParts") :: TriggerNode,
				["CSG"] = constructTrigger("Performance/Server/Memory/CSG") :: TriggerNode,
				["Particle"] = constructTrigger("Performance/Server/Memory/Particle") :: TriggerNode,
				["Part"] = constructTrigger("Performance/Server/Memory/Part") :: TriggerNode,
				["MeshPart"] = constructTrigger("Performance/Server/Memory/MeshPart") :: TriggerNode,
				["TerrainGraphics"] = constructTrigger("Performance/Server/Memory/TerrainGraphics") :: TriggerNode,
				["Textures"] = constructTrigger("Performance/Server/Memory/Textures") :: TriggerNode,
				["TerrainVoxels"] = constructTrigger("Performance/Server/Memory/TerrainVoxels") :: TriggerNode,
				["Animations"] = constructTrigger("Performance/Server/Memory/Animations") :: TriggerNode,
			},
		},
	},
	["Spending"] = {
		["Purchase"] = {
			["Product"] = {
				["Name"] = constructTrigger("Spending/Purchase/Product/Name") :: TriggerNode,
				["Price"] = constructTrigger("Spending/Purchase/Product/Price") :: TriggerNode,
			},
			["Gamepass"] = {
				["Name"] = constructTrigger("Spending/Purchase/Gamepass/Name") :: TriggerNode,
				["Price"] = constructTrigger("Spending/Purchase/Gamepass/Price") :: TriggerNode,
			},
		},
	},
	["Demographics"] = {
		["AccountAge"] = constructTrigger("Demographics/AccountAge") :: TriggerNode,
		["RobloxLanguage"] = constructTrigger("Demographics/RobloxLanguage") :: TriggerNode,
		["SystemLanguage"] = constructTrigger("Demographics/SystemLanguage") :: TriggerNode,
		["UserSettings"] = {
			["GamepadCameraSensitivity"] = constructTrigger("Demographics/UserSettings/GamepadCameraSensitivity") :: TriggerNode,
			["MouseSensitivity"] = constructTrigger("Demographics/UserSettings/MouseSensitivity") :: TriggerNode,
			["SavedQualityLevel"] = constructTrigger("Demographics/UserSettings/SavedQualityLevel") :: TriggerNode,
		},
		["Platform"] = {
			["Accelerometer"] = constructTrigger("Demographics/Platform/Accelerometer") :: TriggerNode,
			["Gamepad"] = constructTrigger("Demographics/Platform/Gamepad") :: TriggerNode,
			["Gyroscope"] = constructTrigger("Demographics/Platform/Gyroscope") :: TriggerNode,
			["Keyboard"] = constructTrigger("Demographics/Platform/Keyboard") :: TriggerNode,
			["Mouse"] = constructTrigger("Demographics/Platform/Mouse") :: TriggerNode,
			["Touch"] = constructTrigger("Demographics/Platform/Touch") :: TriggerNode,
			["VR"] = constructTrigger("Demographics/Platform/VR") :: TriggerNode,
			["ScreenSize"] = constructTrigger("Demographics/Platform/ScreenSize") :: TriggerNode,
			["ScreenRatio"] = constructTrigger("Demographics/Platform/ScreenRatio") :: TriggerNode,
		},
	},
	["Gameplay"] = {
		["BackpackAdded"] = constructTrigger("Gameplay/BackpackAdded"),
		["BackpackDeleted"] = constructTrigger("Gameplay/BackpackDeleted"),
		["EquipTool"] = constructTrigger("Gameplay/EquipTool"),
		["EquipVehicle"] = constructTrigger("Gameplay/EquipVehicle"),
		["VehiclesAdded"] = constructTrigger("Gameplay/VehiclesAdded"),
		["VehiclesDeleted"] = constructTrigger("Gameplay/VehiclesDeleted"),
		["CustomizeAvatar"] = constructTrigger("Gameplay/CustomizeAvatar")
	},
	["Others"] = {
		["ABValue"] = constructTrigger("Others/ABValue")
	}
}